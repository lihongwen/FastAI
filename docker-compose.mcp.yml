# Docker Compose for pgvector MCP Server development
version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: pgvector-postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgvector MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    container_name: pgvector-mcp-server
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/postgres
      DASHSCOPE_API_KEY: ${DASHSCOPE_API_KEY:-your_api_key_here}
      DEBUG: ${DEBUG:-false}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount for document processing (optional)
      - ./test_documents:/app/documents:ro
      # Mount for logs
      - ./logs:/app/logs
    networks:
      - mcp-network
    restart: unless-stopped
    stdin_open: true
    tty: true
    
  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgvector-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - mcp-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  mcp-network:
    driver: bridge