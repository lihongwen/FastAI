# Multi-stage Dockerfile for pgvector MCP Server
FROM python:3.13-slim as builder

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Production stage
FROM python:3.13-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd --create-home --shell /bin/bash app

# Set working directory
WORKDIR /app

# Copy installed packages from builder
COPY --from=builder /root/.local /home/app/.local

# Copy application code
COPY . .

# Change ownership to app user
RUN chown -R app:app /app

# Switch to non-root user
USER app

# Add user's local bin to PATH
ENV PATH=/home/app/.local/bin:$PATH

# Set Python path
ENV PYTHONPATH=/app

# Default environment variables
ENV DATABASE_URL=postgresql://postgres:password@localhost:5432/postgres
ENV DASHSCOPE_API_KEY=""
ENV DEBUG=false

# Expose port (if using HTTP transport)
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "
import sys; sys.path.insert(0, '.'); 
from mcp_server import list_collections; 
result = list_collections(); 
exit(0 if result.get('success') else 1)
" || exit 1

# Default command
CMD ["python", "start_mcp_server.py"]